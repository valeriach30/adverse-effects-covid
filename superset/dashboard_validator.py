#!/usr/bin/env python3
"""
Script de verificaci√≥n final - Confirmar que dashboard funciona correctamente
"""

import json
import urllib.request
from http.cookiejar import CookieJar

def verify_complete_dashboard():
    """Verificar que el dashboard est√© funcionando correctamente"""
    
    base_url = "http://localhost:8088"
    print("üîç VERIFICACI√ìN FINAL DEL DASHBOARD VAERS")
    print("="*50)
    
    # Setup cookies
    cookie_jar = CookieJar()
    cookie_processor = urllib.request.HTTPCookieProcessor(cookie_jar)
    opener = urllib.request.build_opener(cookie_processor)
    urllib.request.install_opener(opener)
    
    # Login
    print("üîê Autenticando...")
    login_data = json.dumps({
        "username": "admin",
        "password": "admin",
        "refresh": True,
        "provider": "db"
    }).encode('utf-8')
    
    login_headers = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    try:
        req = urllib.request.Request(f"{base_url}/api/v1/security/login", data=login_data, headers=login_headers)
        with urllib.request.urlopen(req, timeout=30) as response:
            result = json.loads(response.read().decode('utf-8'))
            access_token = result.get("access_token")
        
        if not access_token:
            print("‚ùå Error obteniendo token")
            return False
            
        print("‚úÖ Autenticaci√≥n exitosa")
        
    except Exception as e:
        print(f"‚ùå Error en login: {str(e)}")
        return False
    
    # Headers autenticados
    auth_headers = {
        'Authorization': f'Bearer {access_token}',
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }
    
    # Verificar datasets
    print("\nüìä Verificando datasets...")
    try:
        req = urllib.request.Request(f"{base_url}/api/v1/dataset/", headers=auth_headers)
        with urllib.request.urlopen(req, timeout=30) as response:
            datasets = json.loads(response.read().decode('utf-8')).get("result", [])
            
            vaers_datasets = []
            for dataset in datasets:
                table_name = dataset.get("table_name", "")
                if "vaers" in table_name.lower():
                    vaers_datasets.append({
                        "id": dataset["id"],
                        "name": table_name
                    })
            
            print(f"   ‚úÖ Datasets VAERS encontrados: {len(vaers_datasets)}")
            for ds in vaers_datasets:
                print(f"      ‚Ä¢ {ds['name']} (ID: {ds['id']})")
                
    except Exception as e:
        print(f"‚ùå Error verificando datasets: {str(e)}")
        return False
    
    # Verificar gr√°ficos
    print("\nüìà Verificando gr√°ficos...")
    try:
        req = urllib.request.Request(f"{base_url}/api/v1/chart/", headers=auth_headers)
        with urllib.request.urlopen(req, timeout=30) as response:
            charts = json.loads(response.read().decode('utf-8')).get("result", [])
            
            vaers_charts = []
            for chart in charts:
                chart_name = chart.get("slice_name", "")
                if any(keyword in chart_name.lower() for keyword in ["vaers", "fabricante", "s√≠ntoma", "hospital", "geogr√°f"]):
                    vaers_charts.append({
                        "id": chart["id"],
                        "name": chart_name,
                        "viz_type": chart.get("viz_type", "unknown")
                    })
            
            print(f"   ‚úÖ Gr√°ficos VAERS encontrados: {len(vaers_charts)}")
            for chart in vaers_charts:
                print(f"      ‚Ä¢ {chart['name']} (ID: {chart['id']}, Tipo: {chart['viz_type']})")
                
    except Exception as e:
        print(f"‚ùå Error verificando gr√°ficos: {str(e)}")
        return False
    
    # Verificar dashboards
    print("\nüéØ Verificando dashboards...")
    try:
        req = urllib.request.Request(f"{base_url}/api/v1/dashboard/", headers=auth_headers)
        with urllib.request.urlopen(req, timeout=30) as response:
            dashboards = json.loads(response.read().decode('utf-8')).get("result", [])
            
            vaers_dashboards = []
            for dashboard in dashboards:
                dashboard_title = dashboard.get("dashboard_title", "")
                if "vaers" in dashboard_title.lower():
                    vaers_dashboards.append({
                        "id": dashboard["id"],
                        "title": dashboard_title,
                        "published": dashboard.get("published", False)
                    })
            
            print(f"   ‚úÖ Dashboards VAERS encontrados: {len(vaers_dashboards)}")
            for dash in vaers_dashboards:
                status = "‚úÖ Publicado" if dash["published"] else "‚ö†Ô∏è Borrador"
                print(f"      ‚Ä¢ {dash['title']} (ID: {dash['id']}) - {status}")
                print(f"        üîó URL: {base_url}/superset/dashboard/{dash['id']}/")
                
    except Exception as e:
        print(f"‚ùå Error verificando dashboards: {str(e)}")
        return False
    
    # Resumen final
    print("\n" + "üéâ" + "="*48 + "üéâ")
    print("       VERIFICACI√ìN COMPLETADA EXITOSAMENTE")
    print("="*50)
    print(f"üìä Datasets VAERS: {len(vaers_datasets)}")
    print(f"üìà Gr√°ficos creados: {len(vaers_charts)}")
    print(f"üéØ Dashboards disponibles: {len(vaers_dashboards)}")
    print("\nüöÄ DASHBOARD VAERS COMPLETAMENTE FUNCIONAL!")
    print("üîó Acceso: http://localhost:8088")
    print("üîë Login: admin / admin")
    print("="*50)
    
    return len(vaers_datasets) >= 3 and len(vaers_charts) >= 4 and len(vaers_dashboards) >= 1

if __name__ == "__main__":
    success = verify_complete_dashboard()
    if success:
        print("‚úÖ VERIFICACI√ìN EXITOSA - Dashboard completamente funcional!")
    else:
        print("‚ùå VERIFICACI√ìN FALLIDA - Revisar configuraci√≥n")
    exit(0 if success else 1)